package com.los.common.impl;

//--- UTILITIES
import java.io.Serializable;
import java.util.List;
import java.util.Map;
import org.apache.log4j.Logger;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;

import com.dbgwfloansdb.DbgwfloansDB;
import com.los.common.service.DBService;

import com.wavemaker.runtime.RuntimeAccess;

/**
 * @author elbi Java Services
 *         http://dev.wavemaker.com/wiki/bin/wmdoc_6.5/JavaServices Cannot use
 *         SELECT statements via executeQuery(). Looking for simple example
 *         http://dev.wavemaker.com/forums/?q=node/7024
 * 
 */
public class DBServiceImpl implements DBService {

	// ================================================================================================================================//
	// TODO: add this so that you willl save precious resources
	// prevents instantiation
	// private DBServiceImpl(){}
	// ================================================================================================================================//

	// IMPORTANT!!!
	private static final String DBNAME = "dbgwfloansDB";

	/**
	 * name of the database service name generated by the wavemaker
	 */
	private static final DBServiceImpl dbServiceImpl = new DBServiceImpl();

	/**
	 * Returns a global instance of this DBService implementation
	 * 
	 * @return
	 */
	public static DBService getInstance() {
		return dbServiceImpl;
	}

	// http://www.mkyong.com/hibernate/hibernate-query-examples-hql/
	// http://docs.jboss.org/hibernate/orm/3.3/reference/en/html/querysql.html
	// http://www.mkyong.com/hibernate/hibernate-native-sql-queries-examples/
	// http://www.mkyong.com/hibernate/hibernate-native-sql-queries-examples/
	private static final Logger logger = Logger.getLogger(DBServiceImpl.class);

	// ================================================================================================================================//
	// TODO: OTHER Execution of Getting and Setting Data for Database
	// ================================================================================================================================//
	@Override
	public Object executeUniqueSQLQuery(String sQuery, Map parameters) {
		// ---
		DbgwfloansDB service = (DbgwfloansDB) RuntimeAccess.getInstance().getServiceBean(
				DBNAME);

		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();

			SQLQuery query = session.createSQLQuery(sQuery);
			query.setProperties(parameters);
			Object object = query.uniqueResult();
			service.commit();

			// ---
			return object;

		} catch (Exception ex) {
			logger.warn("Error executing query", ex);
			service.rollback();
		}

		return null;
	}

	@Override
	public List executeListSQLQuery(String sQuery, Map parameters) {
		// ---
		DbgwfloansDB service = (DbgwfloansDB) RuntimeAccess.getInstance().getServiceBean(
				DBNAME);

		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();

			SQLQuery query = session.createSQLQuery(sQuery);
			query.setProperties(parameters);
			List list = query.list();
			service.commit();

			// ---
			return list;

		} catch (Exception ex) {
			logger.warn("Error executing query", ex);
			service.rollback();
		}

		return null;
	}

	/*
	 * Replicate HQL UniqueQuery & just set maximum result to 1 record
	 */
	@Override
	public Object executeUniqueHQLQueryMaxResultOne(String hql, Map parameters) {
		// ---
		DbgwfloansDB service = (DbgwfloansDB) RuntimeAccess.getInstance().getServiceBean(
				DBNAME);

		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();
			Query query = session.createQuery(hql);
			query.setProperties(parameters);
			query.setMaxResults(1); // Reinforce to Set maximun result to 1
									// record

			Object object = query.uniqueResult();
			service.commit();

			// ---
			return object;

		} catch (Exception ex) {
			logger.fatal("Problem executing query " + hql + " with parameters"
					+ parameters, ex);
			service.rollback();
		}

		return null;
	}

	@Override
	public Object executeUniqueHQLQuery(String hql, Map parameters) {
		// ---
		DbgwfloansDB service = (DbgwfloansDB) RuntimeAccess.getInstance().getServiceBean(
				DBNAME);

		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();
			Query query = session.createQuery(hql);
			query.setProperties(parameters);

			Object object = query.uniqueResult();
			service.commit();

			// ---
			return object;

		} catch (Exception ex) {
			logger.fatal("Problem executing query " + hql + " with parameters"
					+ parameters, ex);
			service.rollback();
		}

		return null;
	}

	@Override
	public List executeListHQLQuery(String hql, Map parameters) {
		// ---
		DbgwfloansDB service = (DbgwfloansDB) RuntimeAccess.getInstance().getServiceBean(
				DBNAME);

		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();
			Query query = session.createQuery(hql);
			query.setProperties(parameters);

			List list = query.list();
			service.commit();

			// ---
			return list;

		} catch (Exception ex) {
			logger.warn("ERROR AT DBService.executeListHQLQuery: ", ex);
			logger.fatal("Problem executing query " + hql + " with parameters"
					+ parameters, ex);
			service.rollback();
		}

		return null;
	}

	// BE CAREFUl WITH THE USE
	@Override
	public int executeUpdate(String sQuery, Map paramaters) {
		// ---
		DbgwfloansDB service = (DbgwfloansDB) RuntimeAccess.getInstance().getServiceBean(
				DBNAME);

		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();
			SQLQuery query = session.createSQLQuery(sQuery);
			int affectedRows = query.executeUpdate();
			service.commit();

			// ---
			return affectedRows;

		} catch (Exception ex) {
			logger.fatal("Problem executing update " + sQuery
					+ " with parameters" + paramaters, ex);
			service.rollback();
		}

		return 0;
	}

	// BE CAREFUl WITH THE USE
	@Override
	public int executeHQLUpdate(String hql, Map paramaters) {
		// ---
		DbgwfloansDB service = (DbgwfloansDB) RuntimeAccess.getInstance().getServiceBean(
				DBNAME);

		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();
			Query query = session.createQuery(hql);
			query.setProperties(paramaters);

			int affectedRows = query.executeUpdate();
			service.commit();

			// ---
			return affectedRows;

		} catch (Exception ex) {
			logger.fatal("Problem executing update " + hql + " with parameters"
					+ paramaters, ex);
			service.rollback();
		}

		return 0;
	}

	// BE CAREFUl WITH THE USE
	@Override
	public boolean saveOrUpdate(Object objectToSave) {
		boolean isSuccessfulPayment = false;

		// ---

		DbgwfloansDB service = (DbgwfloansDB) RuntimeAccess.getInstance().getServiceBean(
				DBNAME);

		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();

			if (objectToSave instanceof List) {
				List list = (List) objectToSave;

				for (Object object : list) {
					session.saveOrUpdate(object);
					service.commit();
				}
			}

			else {
				session.saveOrUpdate(objectToSave);
				service.commit();
			}

			isSuccessfulPayment = true;
		} catch (Exception ex) {
			isSuccessfulPayment = false;
			service.rollback();
			// ---
			logger.fatal("Problem executing update " + objectToSave, ex);
		}
		return isSuccessfulPayment;
	}

	// BE CAREFUl WITH THE USE
	// --- Save object to DB
	@Override
	public boolean save(Object objectToSave) {
		boolean isSuccessfulPayment = false;

		// ---
		DbgwfloansDB service = (DbgwfloansDB) RuntimeAccess.getInstance().getServiceBean(
				DBNAME);

		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();

			// --- Save list of object
			if (objectToSave instanceof List) {
				List list = (List) objectToSave;

				for (Object object : list) {
					session.save(object);
					service.commit();
				}
			}
			// --- Save object
			else {
				session.save(objectToSave);
				service.commit();
			}

			isSuccessfulPayment = true;
		} catch (Exception ex) {
			isSuccessfulPayment = false;
			service.rollback();
			// ---
			logger.fatal("Problem executing update " + objectToSave, ex);
		}
		return isSuccessfulPayment;
	}

	// BE CAREFUl WITH THE USE
	// --- Update specific object to DB
	@Override
	public boolean update(Object objectToUpdate) {
		boolean isSuccessfulPayment = false;

		// ---
		DbgwfloansDB service = (DbgwfloansDB) RuntimeAccess.getInstance().getServiceBean(
				DBNAME);

		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();

			// --- Save list of object
			if (objectToUpdate instanceof List) {
				List list = (List) objectToUpdate;

				for (Object object : list) {
					session.update(object);
					service.commit();
				}
			}
			// --- Save object
			else {
				session.update(objectToUpdate);
				service.commit();
			}

			isSuccessfulPayment = true;
		} catch (Exception ex) {
			isSuccessfulPayment = false;
			service.rollback();
			// ---
			logger.fatal("Problem executing update " + objectToUpdate, ex);
		}
		return isSuccessfulPayment;
	}

	@Override
	public boolean delete(Object objectToDelete) {
		boolean isSuccessfulPayment = false;

		// ---
		DbgwfloansDB service = (DbgwfloansDB) RuntimeAccess.getInstance().getServiceBean(
				DBNAME);

		try {

			service.begin();
			Session session = service.getDataServiceManager().getSession();

			// --- Save list of object
			if (objectToDelete instanceof List) {
				List list = (List) objectToDelete;

				for (Object object : list) {
					session.delete(object);
					service.commit();
				}
			}
			// --- Save object
			else {
				session.delete(objectToDelete);
				service.commit();
			}

			isSuccessfulPayment = true;

		} catch (Exception ex) {
			isSuccessfulPayment = false;
			service.rollback();
			// ---
			logger.fatal("Problem executing update " + objectToDelete, ex);
		}
		return isSuccessfulPayment;
	}

	@Override
	public String changePassword(String strUsername, String strPassword,
			String strNewPassword, String strConfirmPassword) {
		//
		// // if(strPassword == null ){
		// // strPassword = "";
		// // }
		//
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put("struname", strUsername);
		// params.put("strpass", strPassword);
		//
		// String hql =
		// "FROM MbiasUser WHERE userId = :struname AND upassword = :strpass";
		// MbiasUser user = (MbiasUser) executeUniqueHQLQuery(hql, params);
		//
		// // check if username exists
		// if (user != null) {
		//
		// // // check of new and confirm password matches
		// // if(strNewPassword.equals(strConfirmPassword)){
		// // // change password
		// // MFDB service = (MFDB) RuntimeAccess.getInstance().getServiceBean(
		// // DBNAME );
		// // user.setUpassword(strNewPassword);
		// // try
		// // {
		// // service.begin();
		// // Session session = service.getDataServiceManager().getSession();
		// // session.saveOrUpdate( user );
		// // service.commit();
		// // }
		// // catch ( Exception ex )
		// // {
		// // service.rollback();
		// // }
		// // return "password successfuly changed";
		// return "1";
		// } else {
		return "0";
		// }
		//
		// // }else{
		// //
		// // // no record found, hence invalid username and password
		// // return "0";
		// // }

	}

	@Override
	public String confirmPasswordMatch(String strUsername, String strPassword,
			String strNewPassword, String strConfirmPassword) {
		//
		// if (strNewPassword.equals(strConfirmPassword)) {
		// // return success
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put("struname", strUsername);
		// params.put("strpass", strPassword);
		//
		// String hql =
		// "FROM MbiasUser WHERE userId = :struname AND upassword = :strpass";
		// MbiasUser user = (MbiasUser) executeUniqueHQLQuery(hql, params);
		//
		// MFDB service = (MFDB) RuntimeAccess.getInstance().getServiceBean(
		// DBNAME);
		// user.setUpassword(strNewPassword);
		// try {
		// service.begin();
		// Session session = service.getDataServiceManager().getSession();
		// session.saveOrUpdate(user);
		// service.commit();
		// } catch (Exception ex) {
		// service.rollback();
		// }
		//
		// return "1";
		//
		// }
		// // return fail
		return "0";
	}

	@Override
	public Serializable saveObject(Object objectToSave) {
		Serializable valSerializable = null;

		// ---
		DbgwfloansDB service = (DbgwfloansDB) RuntimeAccess.getInstance().getServiceBean(
				DBNAME);

		try {
			service.begin();
			Session session = service.getDataServiceManager().getSession();

			valSerializable = session.save(objectToSave);
			service.commit();

		} catch (Exception ex) {
			service.rollback();
			// ---
			logger.fatal("Problem executing update " + objectToSave, ex);
		}
		return valSerializable;
	}

}